{"version":3,"sources":["components/Board.module.css","utility/utility.js","components/Cell.js","utility/animation.js","components/Board.js","hooks/useBoard.js","App.js","index.js","components/Cell.module.css"],"names":["module","exports","generateRandomBoard","row","col","result","i","j","Math","random","React","memo","val","changeBoard","isMouseDown","isAnimating","classes","styles","Cell","push","Active","className","join","draggable","onMouseEnter","prevState","nextState","runAnimation","board","setBoard","maxNum","setIsAnimating","gameHasEnded","secondboard","length","count","intervalId","setInterval","countNeighbors","temp","checkEmptyBoard","clearInterval","Board","useState","gridLength","setGridLength","newValue","newBoard","useBoard","resetBoard","setIsMouseDown","useEffect","animate","a","map","rowNum","colNum","key","style","margin","Button","onClick","disabled","onMouseDown","onMouseUp","gridTemplateColumns","gridTemplateRows","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.570bc389.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Board\":\"Board_Board__Zn9WF\"};","export const generateRandomBoard = (row, col) => {\n  let result = []\n  for (let i = 0; i < row; i++) {\n    result[i] = []\n    for (let j = 0; j < col; j++) {   \n      result[i][j] = (Math.random() <= 0.80) ? 0 : 1;\n    }\n  }\n  return result;\n};\n\n\n","import React from \"react\";\nimport styles from \"./Cell.module.css\";\n\nconst Cell = ({ row, col, val, changeBoard, isMouseDown, isAnimating }) => {\n  const classes = [styles.Cell];\n  val === 1 && classes.push(styles.Active);\n\n  const onMoveHandler = () => {\n    if (isMouseDown && !isAnimating) {\n      changeBoard(row, col, 1);\n      classes.push(styles.Active);\n    }\n  };\n\n  return (\n    <div\n      className={classes.join(\" \")}\n      draggable={false}\n      onMouseEnter={onMoveHandler}\n    ></div>\n  );\n};\n\nconst compare = (prevState, nextState) => {\n  return prevState.val === nextState.val && prevState.isMouseDown === nextState.isMouseDown;\n};\n\nexport default React.memo(Cell, compare);\n","// Any live cell with fewer than two live neighbours dies, as if by underpopulation.\n// Any live cell with two or three live neighbours lives on to the next generation.\n// Any live cell with more than three live neighbours dies, as if by overpopulation.\n// Any dead cell with exactly three live neighbours becomes a live cell, as if by reproduction.\nimport { generateRandomBoard } from \"./index\";\n\nexport const runAnimation = (board, setBoard, maxNum, setIsAnimating) => {\n  let gameHasEnded = false;\n  let secondboard = generateRandomBoard(board.length, board[0].length);\n  let count = 0;\n  //Loop thru each cell applying rules\n  let intervalId = setInterval(() => {\n    count++;\n    for (let row = 0; row < board.length; row++) {\n      for (let col = 0; col < board[row].length; col++) {\n        const count = countNeighbors(row, col, board);\n        if (count < 2 || count > 3) {\n          secondboard[row][col] = 0;\n        } else if (count === 3) {\n          secondboard[row][col] = 1;\n        } else {\n          secondboard[row][col] = board[row][col];\n        }\n      }\n    }\n    const temp = board;\n    board = secondboard;\n    secondboard = temp;\n    //check if game has ended\n    gameHasEnded = checkEmptyBoard(board);\n    setBoard(board);\n    if (count >= maxNum || gameHasEnded) {\n      setIsAnimating(false);\n      clearInterval(intervalId);\n    }\n  }, 250);\n};\n\nconst checkEmptyBoard = (board) => {\n  for (let row = 0; row < board.length; row++) {\n    for (let col = 0; col < board[row].length; col++) {\n      if (board[row][col] === 1) return false;\n    }\n  }\n  return true;\n};\n\nconst countNeighbors = (row, col, board) => {\n  let count = 0;\n  if (row > 0) {\n    // N\n    if (board[row - 1][col] === 1) count++;\n  }\n  if (col > 0) {\n    // W\n    if (board[row][col - 1] === 1) count++;\n  }\n  if (row < board.length - 1) {\n    // S\n    if (board[row + 1][col] === 1) count++;\n  }\n  if (col < board[row].length - 1) {\n    // E\n    if (board[row][col + 1] === 1) count++;\n  }\n  if (row > 0 && col > 0) {\n    // NW\n    if (board[row - 1][col - 1] === 1) count++;\n  }\n  if (row > 0 && col < board[row].length - 1) {\n    // NE\n    if (board[row - 1][col + 1] === 1) count++;\n  }\n  if (row < board.length - 1 && col > 0) {\n    // SW\n    if (board[row + 1][col - 1] === 1) count++;\n  }\n  if (row < board.length - 1 && col < board[row].length - 1) {\n    // SE\n    if (board[row + 1][col + 1] === 1) count++;\n  }\n\n  return count;\n};\n","import React, { useState, useEffect } from \"react\";\nimport { useBoard } from \"../hooks/useBoard\";\nimport Cell from \"./Cell\";\nimport styles from \"./Board.module.css\";\nimport Button from \"@material-ui/core/Button\";\nimport { runAnimation, generateRandomBoard } from \"../utility/\";\n\nconst GRID_LENGTH = 20;\n\nconst Board = () => {\n  const [gridLength, setGridLength] = useState(GRID_LENGTH);\n  const [board, setBoard, changeBoard, resetBoard] = useBoard(\n    gridLength,\n    gridLength\n  );\n  const [isMouseDown, setIsMouseDown] = useState(false);\n  const [isAnimating, setIsAnimating] = useState(false);\n\n  useEffect(() => {\n    setBoard(generateRandomBoard(gridLength, gridLength));\n  }, [gridLength, setBoard]);\n\n  const animate = async () => {\n    setIsAnimating(true);\n    runAnimation(board, setBoard, gridLength, setIsAnimating);\n  };\n\n  const newGrid = () => {\n    setBoard(generateRandomBoard(gridLength, gridLength));\n  };\n\n  let Board = board.map((row, rowNum) => {\n    return board.map((col, colNum) => {\n      return (\n        <Cell\n          key={[rowNum, colNum]}\n          isMouseDown={isMouseDown}\n          row={rowNum}\n          col={colNum}\n          val={board[rowNum][colNum]}\n          changeBoard={changeBoard}\n          isAnimating={isAnimating}\n        />\n      );\n    });\n  });\n\n  return (\n    <>\n      <div style={{ margin: \"auto\" }}>\n        <Button onClick={animate} disabled={isAnimating}>\n          Run Animation\n        </Button>\n        <Button onClick={newGrid} disabled={isAnimating}>\n          New Random Grid\n        </Button>\n        <Button onClick={resetBoard} disabled={isAnimating}>\n          Clear Grid\n        </Button>\n        <Button\n          onClick={() => setGridLength(gridLength === 30 ? 10 : 30)}\n          disabled={isAnimating}\n        >\n          Toggle Grid Size\n        </Button>\n      </div>\n      <div\n        className={styles.Board}\n        onMouseDown={() => {\n          setIsMouseDown(true);\n        }}\n        onMouseUp={() => {\n          setIsMouseDown(false);\n        }}\n        draggable={false}\n        style={{\n          gridTemplateColumns: `repeat(${gridLength}, 1fr)`,\n          gridTemplateRows: `repeat(${gridLength}, 1fr)`,\n        }}\n      >\n        {Board}\n      </div>\n    </>\n  );\n};\n\nexport default Board;\n","import { useState } from \"react\";\nimport { generateRandomBoard } from \"../utility/utility\";\n\nexport const useBoard = (row, col) => {\n  const [board, setBoard] = useState(() => generateRandomBoard(row, col));\n  \n  const changeBoard = (row, col, newValue) => {\n    const newBoard = [...board];\n    newBoard[row][col] = newValue;\n    setBoard(newBoard);\n  };\n\n  const resetBoard = () => {\n    const newBoard = [...board];\n    for (let i = 0; i < board.length; i++) {\n      for (let j = 0; j < board[i].length; j++) {\n        newBoard[i][j] = 0;\n      }\n    }\n    setBoard(newBoard);\n  };\n\n  return [board, setBoard, changeBoard, resetBoard];\n};\n","import React from \"react\";\nimport Board from \"./components/Board\";\n\nconst App = () => (\n  <div className=\"App\">\n    <h1>Game of Life</h1>\n    <br />\n    <Board></Board>\n  </div>\n);\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Cell\":\"Cell_Cell__1C8zh\",\"Active\":\"Cell_Active__1WAud\"};"],"sourceRoot":""}